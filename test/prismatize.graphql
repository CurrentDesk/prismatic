"""
Support for mixed types
"""
scalar Any

scalar DateTime

"""
Denotes default value
"""
directive @default(value: Any!) on FIELD_DEFINITION

"""
Denotes unique identifiers
"""
directive @unique on FIELD_DEFINITION

type Comment {
  id: ID! @unique
  name: String!
  text: String!
}

type Post {
  id: ID! @unique
  isPublished: Boolean! @default(value: "false")
  title: String!
  text: String!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, first: Int, last: Int): [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
`Comment` create definition
"""
input CommentCreateInput {
  name: String!
  text: String!
}

"""
`Comment` create many definition
"""
input CommentCreateManyInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

"""
`Comment` order by options definition
"""
enum CommentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  text_ASC
  text_DESC
}

"""
`Comment` update definition
"""
input CommentUpdateInput {
  name: String
  text: String
}

"""
`Comment` filter definition
"""
input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOR: [CommentWhereInput!]
  NOT: CommentWhereInput
  id: ID
  id_ne: ID
  id_gt: ID
  id_gte: ID
  id_lt: ID
  id_lte: ID
  id_in: [ID!]
  id_nin: [ID!]
  name: String
  name_ne: String
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_in: [String!]
  name_nin: [String!]
  text: String
  text_ne: String
  text_gt: String
  text_gte: String
  text_lt: String
  text_lte: String
  text_in: [String!]
  text_nin: [String!]
}

"""
`Comment` unique filter definition
"""
input CommentWhereUniqueInput {
  id: ID
}

"""
`Post` create definition
"""
input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  comments: CommentCreateManyInput
}

"""
`Post` create many definition
"""
input PostCreateManyInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

"""
`Post` order by options definition
"""
enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""
`Post` update definition
"""
input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

"""
`Post` filter definition
"""
input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOR: [PostWhereInput!]
  NOT: PostWhereInput
  id: ID
  id_ne: ID
  id_gt: ID
  id_gte: ID
  id_lt: ID
  id_lte: ID
  id_in: [ID!]
  id_nin: [ID!]
  isPublished: Boolean
  isPublished_ne: Boolean
  isPublished_gt: Boolean
  isPublished_gte: Boolean
  isPublished_lt: Boolean
  isPublished_lte: Boolean
  isPublished_in: [Boolean!]
  isPublished_nin: [Boolean!]
  title: String
  title_ne: String
  title_gt: String
  title_gte: String
  title_lt: String
  title_lte: String
  title_in: [String!]
  title_nin: [String!]
  text: String
  text_ne: String
  text_gt: String
  text_gte: String
  text_lt: String
  text_lte: String
  text_in: [String!]
  text_nin: [String!]
  comments_all: CommentWhereInput
  comments_elemMatch: CommentWhereInput
  createdAt: DateTime
  createdAt_ne: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_in: [DateTime!]
  createdAt_nin: [DateTime!]
  updatedAt: DateTime
  updatedAt_ne: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_nin: [DateTime!]
}

"""
`Post` unique filter definition
"""
input PostWhereUniqueInput {
  id: ID
}

type Query {
  """
  Returns a list of `Post`s that match the filter
  """
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, first: Int, last: Int): [Post]!
  """
  Returns a single `Post` record by ID
  """
  post(where: PostWhereUniqueInput!): Post
  """
  Returns a list of `Comment`s that match the filter
  """
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, first: Int, last: Int): [Comment]!
  """
  Returns a single `Comment` record by ID
  """
  comment(where: CommentWhereUniqueInput!): Comment
}

type Mutation {
  """
  Creates a new `Post` record
  """
  createPost(data: PostCreateInput!): Post!
  """
  Updates a uniquely identified `Post` record
  """
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  """
  Deletes a uniquely identified `Post` record
  """
  deletePost(where: PostWhereUniqueInput!): Post
  """
  Creates a new `Comment` record
  """
  createComment(data: CommentCreateInput!): Comment!
  """
  Updates a uniquely identified `Comment` record
  """
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  """
  Deletes a uniquely identified `Comment` record
  """
  deleteComment(where: CommentWhereUniqueInput!): Comment
}
